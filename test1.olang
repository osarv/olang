type myTestArr int32[][]
type sdfs myTestArr
type myVocab1 vocab {THIS, THAT}
type myVocab2 vocab {THIS, THEN, NOW, WHAT}

import "test2.olang" test2
type sdfsddfs test2.MyInt23

type MyStruct struct {
    sfs int32[][-2],
    that int64[][],
    sdsdfs myTestArr,
    dsfs myStruct2
}

type myStruct2 struct {
    tsdfsdfs MyStruct{}
}

type MyFunc func(in mut int32[][])(int32[2], MyStruct{}[24])
type MyFunc2 func(in byte[], in2 mut test2.MyInt23)(int32, int32, MyStruct{}[24])

func MyActualFunc(mStr mut MyStruct, in1 test2.MyInt23, i int32[])(bool, int32[2]) {
    if true {
        for i int32 = 0, i < 0, i++ {
        }
    }
}
