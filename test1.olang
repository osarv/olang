type myTestArr int32[][];
type sdfs myTestArr;

type myVocab1 vocab {
    THIS,
    THAT
}

type myVocab2 vocab {
    THIS,
    THEN,
    NOW,
    WHAT
}

import test2 "test2.olang";
type sdfsddfs test2.MyInt23;

type MyStruct struct {
    sfs int32[][-2],
    that int64[][],
    sdsdfs myTestArr,
    dsvs myStruct2
}

type myStruct2 struct {tsdfsdfs MyStruct{}}

error myError {ERROR_1, ERROR_2}
error myError2 {ERROR_1, ERROR_2}

hi mut int32 = 2;


type MyFunc func(in mut int32[][]) myError ? int32[2];
type MyFunc2 func(in byte[], in2 mut test2.MyInt23);

func main(mStr mut MyStruct, in mut test2.MyInt23, j mut int32[]) myError + myError2 ? bool {
    if true {
        for i int32 = 0; i < in; i++ {
            if false {}
        }
    }

    match 0 {
        case 'h' {return true; exit 0;}
        case 2 {exit;}
        nomatch {exit 0;}
    }

    in = 0;
    k float32 = 0.0;
    k = in;
    if 0 != in {}
    j = k;
    jk bool = true;
    return jk;
    exit;
}
